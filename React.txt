											React.js
											********

#) What is react
	* It is a open source javascript library for building user interface
	
#) Why is React
	* Reusable of code
	* React is declarative
		-> We just want to tell to react what we want & it will build the actual UI
		-> React will handle efficiently updating and rendering of the component when data changes.
		-> DOM (Document Object Model i.e., represents the web page as a tree structure) updates are handles gracefully in react.
	* We can integrate react into any of our applications, whether it may be portion of page,full page or complete application.

#) Node.js and text editor(like vs code) is required to run react

#) Create React app
===================
	* It is a CLI tool that allows to quickly create & run react application with no configuration( i.e., simply run the command entire project will be created)
	* React will run in localhost 3000
	* Methods to create react application using create-react app
		i) npx
		   ---
			-> It is a npm package runner it get installed when we install node, this is the reason we directly able to run create-react-app without having to install it
			-> Syntax : npx create-react-app <project_name>
			-> Steps: 
				  > npx create-react-app <project_name>
				  > cd /.project_name/
				  > npm start
				  > <project_name> -> src -> App.js -> implementations are present we can chenge this implementation to display in webbrowser

		ii) npm
		    ---
			-> Install the create-react-app globally & then use thepackage to generate package
			    npm install create-react-app -g
			-> create-react-app <project_name>   (React application is created)

#) Folders involved in REACT Application & how the control flows when we run react application
===============================================================================================
	i) node_modules: 
	   -------------
		* Folders which contains all the dependencies
		* This folder is generated when we run create-react-app or npm install
	ii) public:
	    -------
		a) manifest.json:
		   ==============
			-> It is concerned with progressive web application
		b) favicon.ico:
		   ============
			-> Which we see in browser tab
		c) index.html:
		   ===========
			-> It is the only html file present in application		
			-> No changes to be done in body section because React to control UI so we have one div tag with id="root"
			-> At runtime React application takes over this div tag & is responsible for the UI
	iii) src:
             ----
			1) index.js:
			   ---------
				-> Here we specify root component which is <App/> component & DOM element which will be controlled by React(DOM element is id="root")
				-> App component is rendered inside the root DOM node that bring us to <App/> component which is present in  App.js 
			2) App.js:
			   -------
				-> App.js  is the responsible for the HTML to see in browser in other words App component represents the view which we see in the browser
			3) App.test.js
			   ------------
				-> Contains sample test case
			4) ServiceWorker.js:
			   -----------------
				-> It concerned with progressive web application

	* Working
		When npm start -> Search for index.html -> with root DOM node from index.html control enters to index.js -> React DOM renders the App component on to the root DOM Node -> App Component(App.js) contains HTML which is gonna display

#) Components
=============
	* It represent part of UI
	* Component in code:
	  ------------------
		-> Component code placed in javascript file
		   eg: App component i.e., App.js (.jsx)
	* Types Of Components
	  -------------------
		a) functional component
		   ==============================
			-> They are javscript function which accepts properties(props) and inturn returns HTML(jsx) which describes UI
			-> function naanu(x)
			   {
				return <h1> Hello, {x.name}</h1>;
			   }
			-> Absence of 'this' keyword in functional components
			-> They also known as Dump/Presentational components

		b) class component
		   =========================
			-> They are ES6 classes that extends component class from React library 
			-> They contain Render method which inturn return HTML
			-> class A extends React.component{
				render() {
					return <h1>Hello,{this.props.name}</h1>;
				}
			   }
			-> They also known as Statefull/Smart/Container components

	     eg: Present in practice_1_Components
		>In App.js
		 =========
			import logo from './logo.svg';
			import './App.css';
			// importing class component
			import Welcome from './components/Welcome_Class';
			//importing functional component
			import Naanu from './components/functional';

			function App() {
  				return (
    					<div className="App">
      						<header className="App-header">
        						<img src={logo} className="App-logo" alt="logo" />
        						<p>Bharathraj G P</p>
        						<a
         				 		  className="App-link"
         				 		  href="https://reactjs.org"
        						  target="_blank"
         						  rel="noopener noreferrer">
          							Learn React
        						</a>
      						</header>
      						<Welcome/> 
      						<Naanu/>
    					</div>
  					);
			}

			export default App;
		
		>Create a two files for 2 components in a folder
			-> functional.js (functional components)
			   =====================================
				import React from "react";
				const Naanu=() => <h1>Functional Components</h1> ;
				export default Naanu; //exporting functional component

			-> Welcome_Class.js (Class Components)
			   ===================================
				import React,{Component} from "react";

				class Welcome extends Component{
    					render(){
        					return <h1>Class Component</h1>
    					}
				}
				export default Welcome

#) JSX
======
	* JavaScript XML(JSX) is the extension to the JavaScript language Syntax
	* JSX tags also have tag name,attributes & children
	* JSX makes React code simpler and elegant
	* JSX transpiles( the process of taking source code written in one language and transforming it into another language) to pure javascript which is understood by the browser
	  Examples for coding both using and without using JSX
	  eg: Present in practice_2_jsx(JSX_Folder)
		>In App.js
		 =========
			import logo from './logo.svg';
			import './App.css';
			// importing 
			import Hello from './JSX_Folder/Jsx_1';

			function App() {
  				return (
    					<div className="App">
      						<Hello />
    					</div>
  					);
			}

			export default App;
		
		>Create a files in a folder just for coding
			-> Jsx_1.js (Using JSX library)
			   ===========================
				import React from 'react';

				Using JSX library
				const Hello=()=>{
				     return(
         				<div>
             					<h1>I'm Bharath</h1>
         					</div>
				     )
 				}
				export default Hello;

			-> Jsx_1.js (Using JSX library)
			   ===========================

				// Without using JSX
				//   -> For this purpose React library provides a createElement(String->Which_Specifies_the_HTML_tag_to Render,Additional Property[Object of key value pair that will be applied to the element or adding id and class name to a tag],Chlidren for HTML Element) method which accept minimum of 3 parameter
				import React from 'react';
				const Hello=()=>{
    					return React.createElement('div',{id:"naanu",className: "FirstClass"},React.createElement('h1',null,'Im Bharath'))
				}

				export default Hello;


	* Each JSX element is just syntactic sugar for calling React.CreateElement() for this purpose only import React is needed
	* JSX Difference from normal html
		-> Class => className
		-> for => htmlFor
		-> onclick => onClick
		-> tabindex => tabIndex

#) Props(Properties)
====================
	* It is the optional input that component can accept & it allows the component to be dynamic
	* Props in class component
		-> Properties can be accessed in class component through this.props
	* Props are immutable in nature (that we cannot change the values of props)
	  eg: Present in practice_2_jsx(Props_Folder)
		>In App.js
		 =========
			import logo from './logo.svg';
			import './App.css';
			// importing 
			import Hello from './JSX_Folder/Jsx_1';
			import Naanu from './Props_Folder/Name';
			import Welcome from './Components/Class_Welcome';

			function App() {
  				return (
					<div className="App">
    						<Naanu name="Bharath" age="23">
          						<p>Children property </p>
        					</Naanu>
        					<Naanu name="Vijay" age="21">
          						<button type="submit" >submit</button>
        					</Naanu>
        					<Naanu name="Subadhre" age="16">
          						<a href="https://en.wikipedia.org/wiki/MS_Dhoni">click me</a>
        					</Naanu>
						{/* Props in Class Component */}
						<Welcome name="Bharath" age="23">
        						<p>Children property </p>
        					</Welcome>
        					<Welcome name="Vijay" age="21"></Welcome>
					</div>
  					);
			}

			export default App;
		
		>Create a files in a folder just for coding
			-> name.js (Using JSX library)
			   ===========================
				import React from 'react';

				const Naanu =(props)=>{
    					return(
        					<div>
            						<h1>
                						Hello {props.name} is {props.age} years old
            						</h1>
            						{props.children}{/* Accessing for child tags*/}
        					</div>
    						)
				}

				export default Naanu;

		>>Create a files in a folder just for writing a class component
			-> Class_Welcome.js (Using JSX library)
			   ====================================
				import React, { Component } from "react";

				class Welcome extends Component {
  					render() {
    						return <div>
             						   <h1>Class Component</h1>
          						   <h1>Hi, {this.props.name} is {this.props.age} years old</h1>
             						   {this.props.children}
    							</div>;
  					}
				}

				export default Welcome;

	
   NOTE : JSX return statement should contain only one wrapper element

#) Component State
==================
	* State is an object that is privately maintained inside the component 
	* State can influence what is rendered in the browser
	* State can be changed within the component
	* useStateHook is used in functional Component
	* this.state is used in class component
	* Steps to create and use the state component
		Step 1: Create state object & initialize, this step should be done within the class constructor
			-> Write a constructor & call super() to acquire the properties from component class
			-> Create state object 
				like this.state={}
			-> Initialize the value inside the state object
		Step 2: Bind the state value in render function within return statement
				like return <h1>{this.state.message}</h1>

	    Now we can change the message appeared in the browser because we used state to render the message

		Step 3: Add your requirement what to be rendered
		Step 4: Add the functionality to the step 3 requirements

	
	* eg:Present in practice_2_jsx(States_Folder)
		>In App.js
		 =========
			import logo from './logo.svg';
			import './App.css';
			// importing
			import Message from './States/Message';

			function App() {
  				return (
					<div className="App">
        					<Welcome></Welcome>
					</div>
  					);
			}

			export default App;
		
		>Create a files in a folder just for coding
			-> Welcome.js (Using JSX library)
			   ===========================
				// Create class component
				import React, { Component } from "react";

				class Message extends Component {
    					constructor()
    					{
        					super()
        					this.state={
            						message:"Welcome Bhai"
        					}
    					}
    					changeMessage()
    					{
        					//this setState() accept the object(i.e., new state of an component) as an argument
        					this.setState({
            						message:"Thanking You for clicking"
        					})
    					}
  					render() {
    						return(
        						<div>
            							<h1>{this.state.message}</h1>
            								<button onClick={()=>this.changeMessage()}>Click</button>
        						</div>
    						);
  					}
				}

				export default Message;

	* setState()
	  ----------
		-> Never modify the state directly instead make use of setState
		-> If we modify the state directly react will not rerender the component
		-> setState() will let React to know that it has to rerender the component
		-> If we want execute some set of code only after state has been updated, then pass that cade in callback function as 2nd parameter to the setState()
			setState(stateObject,call back Function)
		-> If we have to update the state based on the previous state we need to pass function as an argument to setState() instead of passing an object.
		-> eg: Present in practice_2_jsx(States_Folder => Counter.js)

#) Destructuring props and state
=================================
	i) Destructure prop in functional component
		a) Destructure in parameter
			const function_Name=({value1,value2,.})=>{
				return ;
			}

		b) Destructure in the body
			const function_Name=(props)=>{
				const {value1,value2,.}=props
				return;
			}

	ii)  Destructure prop in Class component
		class ClassName extends Component{
			render(){
				const {value1,value2,.}=this.props
				return;
			}
		}

	iii) Destructure of state in class component
		syntax : const {state1,state2,...}=this.state

#) Event Handler
================
	* React events are named using camel case rather than lower case
	* With JSX we pass the function as event handler rather than a string
		like : <button onClick={clickHandler}>ClickFunction</button> => For function component
			<button onClick={this.clickHandler}>ClickClass</button> => for class component (this key word is mandatory here)
	* Event handler is a function not a function call so <button onClick={clickHandler}>ClickFunction</button> NOT <button onClick={clickHandler()}>ClickFunction</button>
	* eg:Present in practice_2_jsx(Event_Handler_Folder)
		>In App.js
		 =========
			import logo from './logo.svg';
			import './App.css';
			// importing
			import FunctionClick from './Event_Handler_Folder/FunctionClick';
			import ClassClick from './Event_Handler_Folder/ClassClick';

			function App() {
  				return (
					<div className="App">
        					<FunctionClick></FunctionClick>{/* For functional component*/}
        					<ClassClick></ClassClick>{/* For Class component*/}
					</div>
  					);
			}

			export default App;
		
		>Create a files in a folder just for coding
			-> FunctionClick.js (Using JSX library)
			   ===========================
				import React from 'react'

				function FunctionClick() {
    					function clickHandler(){
        					console.log("Button Clicked")
    					}
  					return (
    						<div>
      							<button onClick={clickHandler}>ClickFunction</button>
    						</div>
  					)
				}

				export default FunctionClick

			-> ClassClick.js (Using JSX library)
			   =================================
				import React, { Component } from 'react'

				class ClassClick extends Component {
    					clickHandler(){
        					console.log("Button clicked from Class Compo")
    					}
  					render() {
    						return (
      							<div>
        							{/* this key word is mandatory in class component */}
        							<button onClick={this.clickHandler}>ClassClick</button>
      							</div>
    						)
  					}
				}

				export default ClassClick

	* Binding the Event Handler
		-> Binding of Event handler is because of this keyword behaviour in javascript
		-> this keyword within event handler is undefined so event binding is necessary
		-> eg:Present in practice_2_jsx(Event_Handler_Folder)
		-> Methods to Binding the Event handler
			i) Binding in Render method
				> Use bind keyword and bind the handler in Render mathod
				  eg:Present in practice_2_jsx(Event_Handler_Folder)
				  >In App.js
		 		  =========
					import logo from './logo.svg';
					import './App.css';
					// importing
					import EventBind from './Event_Handler_Folder/EventBind';

					function App() {
  						return (
							<div className="App">
        							<EventBind></EventBind>
							</div>
  						);
					}

					export default App;
		
				> Create a files in a folder just for coding
					-> EventBind.js (Using JSX library)
			   		===========================
					import React, { Component } from 'react'

					class EventBind extends Component {
    						constructor(props) {
      							super(props)
    
      							this.state = {
         							message:"Hello"
      							}
    						}


    					 	clickHandler()
    						{
         						this.setState({
             							message:"GoodBye"
         						})
						 }

  						render() {
    							return (
      								<div>
        								<div>{this.state.message}</div>
        								{/* Method 1 Binding in render method */}
         								<button onClick={this.clickHandler.bind(this)}>Click_Event_Bind</button>
      								</div>
    							)
  						}
					}

					export default EventBind

			ii) Arrow function in render method
				> We are calling the event handler & returning that value in render method
				> eg:
				> App.js is same 
				> Create a files in a folder just for coding
					-> EventBind.js (Using JSX library)
			   		===========================
					import React, { Component } from 'react'

					class EventBind extends Component {
    						constructor(props) {
      							super(props)
    
      							this.state = {
         							message:"Hello"
      							}
    						}


    					 	clickHandler()
    						{
         						this.setState({
             							message:"GoodBye"
         						})
						 }

  						render() {
    							return (
      								<div>
        								<div>{this.state.message}</div>
         								<button onClick={()=>this.clickHandler()}>Click_Event_Bind</button> 
      								</div>
    							)
  						}
					}

					export default EventBind

			iii) Binding event handler in class constructor
				> Most refered method, Because binding happens once in constructor
				> eg:
				> App.js is same 
				> Create a files in a folder just for coding
					-> EventBind.js (Using JSX library)
			   		===========================
					import React, { Component } from 'react'

					class EventBind extends Component {
    						constructor(props) {
      							super(props)
    
      							this.state = {
         							message:"Hello"
      							}
							this.clickHandler=this.clickHandler.bind(this)
    						}


    					 	clickHandler()
    						{
         						this.setState({
             							message:"GoodBye"
         						})
						 }

  						render() {
    							return (
      								<div>
        								<div>{this.state.message}</div>
         								<button onClick={this.clickHandler}>Click_Event_Bind</button>
      								</div>
    							)
  						}
					}

					export default EventBind

			iv) Use an arrow function as a class property
				> App.js is same 
				> Create a files in a folder just for coding
					-> EventBind.js (Using JSX library)
			   		===========================
					import React, { Component } from 'react'

					class EventBind extends Component {
    						constructor(props) {
      							super(props)
    
      							this.state = {
         							message:"Hello"
      							}
    						}
						clickHandler=()=>{
        						this.setState({
            							message:"GoodBye"
        						})
        						console.log(this)
    						}
  						render() {
    							return (
      								<div>
        								<div>{this.state.message}</div>
         								<button onClick={this.clickHandler}>Click_Event_Bind</button>
      								</div>
    							)
  						}
					}

#) Conditional Rendering
========================
	1) if/else apporach
	2) Using Element Variable approach
	3) Ternary operator approach
	4) short-circuit operator approach

	eg: Present in practice_2_jsx(Conditional_Rendering_Folder (User.js))


#) Rendering the List
=====================
	* List & Keys
	-------------
		-> In item in the list rendered using map operator should have a props called key & value to that props should be unique
		-> They are not accessible in child component
		-> Key give the element to stable identity
		-> Key help react to identify which items have added or are removed

			eg: Present in practice_3(Rendering_List_Folder)

	* Index as key
	--------------
		-> Index is passed as second parameter to the arrow function within the map() & index used as a value to the key props
		
		-> When to use index as a prop
			> The items in the list donot have a unique id
			> The list is static one and do not change
			> The list will never be re-ordered or filtered
		eg : Present in practice_3(Rendering_List_Folder (Key_As_Index.js))


#) Styling React Component
==========================
	1) CSS StyleSheet
	-----------------
		eg: Present in practice_3(StylingReact_Folder (Stylesheet.js))
	2) Inline Styling
	-----------------
		* Inline style is not specified as a string
		* They are specified with an object whose key is camelcase version of CSS style name & value is in String
		* Style attribute is used to access the property of the object in an element
		eg : Present in practice_3(StylingReact_Folder (Inline.js))
	3) CSS Modules
	--------------
		* File naming convension (name.module.css)

	eg: Present in practice_3(StylingReact_Folder)


#) Form handling
================
	* Form element whose value is controlled by react is called controlled components
	* Value attribute is to change based on user interaction
	* onChange attribute is used to update whenever there is a change in the form field

	* Converting normal HTML element to Controlled Component
	--------------------------------------------------------
		Step 1: Create a component state that we control the value of input element
				This is acheived using constructor
				Initialise state property to empty string
				Assign this state property as a value of the HTML element => <input type='text' value={this.state.username} />
		Step 2: Update state changes
				using onChange attribute and onChangeEventHandler
					* <input type='text' value={this.state.username} onChange={this.handleUserNameChange}/>
				Then update state property using setState() in onChangeEventHandler()
					* handleUserNameChange=(event)=>{
        					this.setState({
            						username:event.target.value
        					})
    					  }

		eg: Present in practice_3(FormHandling_Folder (Form.js))


#) Life Cycle Methods
=====================
	1) Mounting



#) Fragments
============
	*Fragment let to group a list of children element without adding extra node to DOM
	* In other words Fragment prevent the extra node from being added to DOM
		i.e., We observe in inspect that, text enclosed with extra <div> tag. This is avoided by using Fragment(using <React.Fragment> tag in return statement) 
			eg: return(
				<React.Fragment>
					<div>Bharath</div>
					<p>Naanu</p>
				</React.Fragment>
			    )

	eg: Present in practice_3(Fragment_Folder)


#) Fragments
============
	*Fragment let to group a list of children element without adding extra node to DOM
	* In other words Fragment prevent the extra node from being added to DOM
		i.e., We observe in inspect that, text enclosed with extra <div> tag. This is avoided by using Fragment(using <React.Fragment> tag in return statement) 
			eg: return(
				<React.Fragment>
					<div>Bharath</div>
					<p>Naanu</p>
				</React.Fragment>
			    )

	eg: Present in practice_3(Fragment_Folder)



#) Pure Component
==================
	* Creating a class component by extending pureComponent class
		eg: class PureCompo extends 		PureComponent {
  				render() {
    				return (
      					<div>
        					PureComponent
      					</div>
    				)
  				}
			}
	* Every 2 seconds Regular component is re-rendered but pure component is never re-rendered
	eg: Present in practice_3(PureComponent_Folder)


#) Refs
=======
	* Uses of refs in HTML element
		-> To Focus on input field
		-> To fetch input value
	eg: Present in practice_3(Refs)


#) 










 



